---
description: Generate blog posts in the format used in the pages/ folder with web search for latest information
alwaysApply: false
---

# 블로그 포스트 생성 규칙

이 규칙은 `pages/` 폴더에 있는 형식에 따라 블로그 포스트를 생성하는 데 도움을 줍니다. 항상 최신 정보를 위해 웹 검색을 수행합니다.

## 📝 블로그 포스트 구조

### Front Matter 형식

```yaml
---
title: "게시글 제목"
date: YYYY-MM-DD
tags: ["태그1", "태그2", "태그3"]
category: "카테고리"
description: "게시글에 대한 간단한 설명 (SEO용)"
---
```

### 콘텐츠 구조

1. **제목**: H1으로 시작
2. **소개**: 2-3문장으로 주제 소개
3. **섹션들**: H2, H3로 구성
4. **코드 예제**: 적절한 언어 태그와 함께
5. **실용적인 팁**: 실제 사용 가능한 예제
6. **마무리**: 요약 및 다음 단계 제안

## 🔍 웹 검색 활용 (필수)

블로그 포스트를 작성하기 전에 **반드시** Tavily MCP를 사용하여 다음을 수행합니다:

1. **최신 정보 검색**: `mcp_tavily-mcp_tavily-search`를 사용하여 주제에 대한 최신 동향, 업데이트, 트렌드 검색
2. **공식 문서 확인**: `mcp_tavily-mcp_tavily-search`를 사용하여 관련 기술의 공식 문서나 가이드 검색
3. **실제 예제 수집**: `mcp_tavily-mcp_tavily-search`를 사용하여 최신 사용 사례나 예제 코드 검색
4. **문제 해결 방법**: `mcp_tavily-mcp_tavily-search`를 사용하여 일반적인 문제와 해결책 검색
5. **웹 콘텐츠 추출**: 필요시 `mcp_tavily-mcp_tavily-extract`를 사용하여 특정 URL의 상세 정보 추출

**중요**: 웹 검색 없이는 블로그 포스트를 생성하지 않습니다. 항상 최신 정보를 확인한 후 작성합니다.

## 📋 작성 가이드라인

### 1. 제목 작성

- 명확하고 구체적인 제목
- 검색하기 쉬운 키워드 포함
- 50자 이내 권장

### 2. 태그 설정

- 3-5개의 관련 태그
- 기술 스택, 개념, 도구명 포함
- 소문자로 작성

### 3. 카테고리 분류

- Development: 개발 관련
- Design: 디자인 관련
- Tutorial: 튜토리얼
- Tips: 팁과 트릭
- News: 뉴스/업데이트

### 4. 콘텐츠 작성

- **실용적**: 실제 사용 가능한 예제 제공
- **최신**: 웹 검색을 통해 최신 정보 반영
- **구체적**: 단계별 설명과 코드 예제
- **읽기 쉬운**: 이모지, 목록, 코드 블록 활용

## 💡 코드 예제 작성 규칙

### JavaScript/TypeScript

```javascript
// 명확한 주석과 함께
const example = () => {
  // 기능 설명
  return result;
};
```

### CSS

```css
/* 사용 목적 설명 */
.selector {
  property: value; /* 추가 설명 */
}
```

### HTML

```html
<!-- 구조 설명 -->
<div class="container">
  <h1>제목</h1>
</div>
```

## 🎯 섹션 구성 예시

### 1. 기본 개념

- 주제에 대한 기본 설명
- 왜 중요한지 설명
- 언제 사용하는지 설명

### 2. 실전 예제

- 단계별 구현 방법
- 실제 코드 예제
- 실행 결과 설명

### 3. 고급 기법

- 더 복잡한 사용 사례
- 최적화 방법
- 성능 고려사항

### 4. 문제 해결

- 일반적인 문제들
- 해결 방법
- 디버깅 팁

### 5. 마무리

- 핵심 포인트 요약
- 다음 학습 방향
- 참고 자료 링크

## 🔧 Tavily MCP 웹 검색 활용 전략

### 필수 검색 도구

- **`mcp_tavily-mcp_tavily-search`**: 최신 정보 검색 (기본)
- **`mcp_tavily-mcp_tavily-extract`**: 특정 URL 상세 정보 추출
- **`mcp_tavily-mcp_tavily-crawl`**: 웹사이트 전체 크롤링 (필요시)

### 검색 키워드 예시

- "최신 [기술명] 2025"
- "[기술명] best practices 2025"
- "[기술명] common problems solutions"
- "[기술명] performance optimization tips"
- "[기술명] latest updates features"

### Tavily MCP 검색 파라미터 설정

```javascript
// 기본 검색 예시
{
  query: "React 18 latest features 2025",
  max_results: 10,
  search_depth: "advanced",
  include_raw_content: true,
  time_range: "month"
}

// 고급 검색 예시
{
  query: "Next.js 14 optimization techniques",
  max_results: 15,
  search_depth: "advanced",
  include_domains: ["nextjs.org", "vercel.com"],
  time_range: "week"
}
```

### 정보 수집 우선순위

1. **공식 문서**: `include_domains`에 공식 사이트 포함
2. **최신 튜토리얼**: `time_range: "month"` 설정
3. **실제 사용 사례**: `search_depth: "advanced"` 사용
4. **커뮤니티 논의**: GitHub, Stack Overflow 등 포함
5. **성능 벤치마크**: `include_raw_content: true`로 상세 정보 수집

## 📊 품질 체크리스트

- [ ] **Tavily MCP 웹 검색을 수행했는가?** (필수)
- [ ] Front Matter가 올바른 형식인가?
- [ ] 제목이 명확하고 검색하기 쉬운가?
- [ ] 최신 정보가 반영되었는가?
- [ ] 코드 예제가 실제로 작동하는가?
- [ ] 단계별 설명이 명확한가?
- [ ] 실용적인 팁이 포함되었는가?
- [ ] 마무리가 적절한가?
- [ ] 웹 검색 결과가 콘텐츠에 적절히 반영되었는가?

## 🚀 생성 프로세스

1. **주제 분석**: 사용자 요청 분석
2. **Tavily MCP 웹 검색**: `mcp_tavily-mcp_tavily-search`를 사용하여 최신 정보 수집 (필수)
3. **추가 정보 수집**: 필요시 `mcp_tavily-mcp_tavily-extract`로 특정 URL 상세 정보 추출
4. **구조 설계**: 웹 검색 결과를 바탕으로 섹션별 내용 계획
5. **Front Matter 작성**: 메타데이터 설정
6. **콘텐츠 작성**: 웹 검색 결과를 반영한 단계별 내용 작성
7. **코드 예제 추가**: 실제 작동하는 예제 (웹 검색 결과 기반)
8. **검토 및 수정**: 품질 체크리스트 확인 (Tavily MCP 검색 여부 포함)
9. **파일 저장**: `pages/` 폴더에 저장
10. **posts.json 업데이트**: `node .github/scripts/generate-posts.js` 실행

이 규칙을 따라 블로그 포스트를 생성하면 일관성 있고 유용한 콘텐츠를 만들 수 있습니다.

## ⚠️ 필수 사항

1. **Tavily MCP 웹 검색 필수**: 모든 블로그 포스트 생성 전에 반드시 `mcp_tavily-mcp_tavily-search`를 사용하여 최신 정보를 검색해야 합니다.

2. **posts.json 업데이트**: 블로그 글을 작성하고 나서 항상 `node .github/scripts/generate-posts.js`를 실행하여 posts.json 파일을 생성하세요.

3. **웹 검색 없이는 생성 금지**: 웹 검색을 수행하지 않고 블로그 포스트를 생성하는 것은 금지됩니다.
